const sendMail = require('../sendmail/sendmail.js'); 
const {
  selectQuery,
  deleteQuery,
  recurringInvoice,
  insertInvoice,
  insertLineItems,
} = require("../constants/queries");
const { queryRunner } = require("../helper/queryRunner");
const cron = require('node-cron');

const task = cron.schedule('*/1 * * * *', async () => {
    // const recurringInvoice = "recurring Invoice";
    console.log("1");
    const currentDate = new Date();
    console.log("1.111");
    const selectTenantsResult = await queryRunner(recurringInvoice)
    // console.log(selectTenantsResult[0]);
    console.log("2");
    console.log(currentDate);
    if(selectTenantsResult[0].length > 0){
      console.log("3");
        // console.log(selectTenantsResult[0][0].id);
      for (let i = 0; i < selectTenantsResult[0].length; i++) {
          const PreviousInvoiceID  = selectTenantsResult[0][i].id;
          const landlordID  = selectTenantsResult[0][i].landlordID;
        const tenantID  = selectTenantsResult[0][i].tenantID;
        const invoiceType = selectTenantsResult[0][i].invoiceType;
        const startDate = selectTenantsResult[0][i].startDate;
        const endDate = selectTenantsResult[0][i].endDate;
        const frequency = selectTenantsResult[0][i].frequency;
        const dueDate = selectTenantsResult[0][i].dueDate;
        const dueDays = selectTenantsResult[0][i].daysDue;
        const repeatTerms = selectTenantsResult[0][i].repeatTerms;
        const terms = selectTenantsResult[0][i].terms;
        const additionalNotes = selectTenantsResult[0][i].note;
        const totalAmount = selectTenantsResult[0][i].totalAmount;
        const createdAt = new Date();
        // const images
        if(frequency == "monthly"){
          console.log( "frequency = monthly");
            // Recurring Next Date Start
            const currentDate = new Date();
            currentDate.setMonth(currentDate.getMonth() + 1);
            
            const year = currentDate.getFullYear();
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            const day = String(currentDate.getDate()).padStart(2, '0');
            const hour = String(currentDate.getHours()).padStart(2, '0');
            const minute = String(currentDate.getMinutes()).padStart(2, '0');
            const second = String(currentDate.getSeconds()).padStart(2, '0');
            
            const recurringNextDate = `${year}-${month}-${day} ${hour}:${minute}:${second}`;
            
            
             
            // Recurring Next Date END 
            const invoiceResult = await queryRunner(insertInvoice, [landlordID, tenantID, invoiceType, startDate, endDate, frequency, dueDate, dueDays, repeatTerms, terms, additionalNotes, "Unpaid", createdAt, totalAmount, recurringNextDate]);
            if (invoiceResult.affectedRows === 0) {
              res.status(400).send('Error occur in creating invoice');
            } else {
              console.log( "Insert Invoice");
                // console.log("successful");


                // Invoice Email Start
                const invoiceID = invoiceResult[0].insertId;
                console.log(invoiceID);
                console.log(tenantID);
      const selectTenantsResult = await queryRunner(selectQuery('tenants', 'id'), [tenantID])
      console.log(selectTenantsResult[0])
      if (selectTenantsResult[0].length > 0) {
        console.log( "tenant Find successfully");
        const tenantEmail = selectTenantsResult[0][0].email;
        const tenantName = selectTenantsResult[0][0].firstName + " " + selectTenantsResult[0][0].lastName;

          const mailSubject = invoiceID + " From " + frequency;
          console.log(tenantName, tenantEmail, mailSubject, dueDays, invoiceID, frequency);
          sendMail.invoiceSendMail(tenantName, tenantEmail, mailSubject, dueDays, invoiceID, frequency);
          console.log( "Send email");
      }else{
        console.log("not found " + tenantID)
      } 
                // Invoice Email END 
console.log("Line item Start");
const lineItemsResult = await queryRunner(selectQuery('invoicelineitems', 'invoiceID'), [PreviousInvoiceID])
if (lineItemsResult[0].length > 0) {
  console.log("Line item Find"+ PreviousInvoiceID);
                    console.log("Line item3");
                    // if (lineItems) {
                        for (let j = 0; j < lineItemsResult[0].length; j++) {
                            const category = lineItemsResult[0][j].category;
                            console.log("category");
                            console.log(lineItemsResult[0][0].category);
                          const property = lineItemsResult[0][j].property;
                          const memo = lineItemsResult[0][j].memo;
                          const amount = lineItemsResult[0][j].amount;
                          // console.log(invoiceID +category+ property+ memo+ amount);
                          // console.log(invoiceID, category, property, memo, amount);
                          console.log("qwe")
                          const invoiceLineItemsResult = await queryRunner(insertLineItems, [invoiceID, category, property, memo, amount])
                          
                          // console.log(invoiceLineItemsResult);
                          // if (invoiceLineItemsResult.affectedRows === 0) {
                          //   res.send('Error2');
                          //   return;
                          // }else{
                          //   console.log( "Line Item Save ");
                          // }
                        // }
                      }
            }    // Insert END
        } 

console.log("asdfg");
      }
    }
    }
      
}
, {
  scheduled: false
}
);

module.exports = task;